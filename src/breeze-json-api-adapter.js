/*
 * REQUIRES breeze.labs.dataservice.abstractrest.js v.0.6.0+
*/

(function(factory) {
    if (typeof breeze === "object") {
        factory(breeze);
    } else if (typeof require === "function" && typeof exports === "object" && typeof module === "object") {
        // CommonJS or Node: hard-coded dependency on "breeze"
        factory(require("breeze-client"));
    } else if (typeof define === "function" && define["amd"]) {
        // AMD anonymous module with hard-coded dependency on "breeze"
        define(["breeze"], factory);
    }
}(function (breeze) {
    "use strict";

    var ctor = function () {
        this.name = "json-api";
    };
    ctor.prototype.initialize = typeInitialize;

    function typeInitialize() {
        // Delay setting the prototype until we're sure AbstractRestDataServiceAdapter is loaded
        var proto = breeze.AbstractRestDataServiceAdapter.prototype;
        proto = breeze.core.extend(ctor.prototype, proto);

        proto.executeQuery = executeQuery;

        proto._createErrorFromResponse = _createErrorFromResponse;
        proto._createChangeRequest = _createChangeRequest;
        proto._createJsonResultsAdapter = _createJsonResultsAdapter;       

        this.initialize(); // the revised initialize()
    }

    breeze.config.registerAdapter("dataService", ctor);

    /////////////////
    // Create error object for both query and save responses.
    // A method on the adapter (`this`)
    // 'context' can help differentiate query and save
    // 'errorEntity' only defined for save response
    function _createErrorFromResponse(response, url, context, errorEntity) {
        var err = new Error();
        err.response = response;
        var data = response.data || {};
        if (url) { err.url = url; }
        err.status =  data.code || response.status || '???';
        err.statusText = response.statusText || err.status;
        err.message =  data.error || response.message || response.error || err.statusText;
        this._catchNoConnectionError(err);
        return err;
    }

    function _createJsonResultsAdapter(/*dataServiceAdapter*/) {
        return new breeze.JsonResultsAdapter({
            name: "noop",
            visitNode: function (/*node, mappingContext, nodeContext*/) {
                return {};
            }

        });
    }


    function _createChangeRequest(saveContext, entity, index) {
        var data, rawEntity, request;
        var type = entity.entityType;
        var rn = type.defaultResourceName;
        if (!rn) {
            throw new Error("Missing defaultResourceName for type " + type.name);
        }

        var adapter = saveContext.adapter;
        var entityManager = saveContext.entityManager;
        var helper = entityManager.helper;
        var baseUrl = entityManager.dataService.serviceName + rn;
        var tempKeys = saveContext.tempKeys;

        var aspect = entity.entityAspect;
        var key = aspect.getKey();
        var state = aspect.entityState;

        if (state.isAdded()) {
            if (type.autoGeneratedKeyType !== breeze.AutoGeneratedKeyType.None) {
                tempKeys[index] = key; // INDEX! DO NOT PUSH. Gaps expected!
            }
            rawEntity = helper.unwrapInstance(entity, adapter._transformSaveValue);
            // Don't send the temp key value or ZUMO will use it!
            // Delete that property so ZUMO generates a good permanent key
            delete rawEntity[type.keyProperties[0].name];
            data = adapter._serializeToJson(rawEntity);
            request = {
                requestUri: baseUrl,
                method: "POST",
                data: data
            };

        } else if (state.isModified()) {
            rawEntity = helper.unwrapChangedValues(entity, entityManager.metadataStore, adapter._transformSaveValue);
            data = adapter._serializeToJson(rawEntity);
            request = {
                requestUri: baseUrl+'/'+ key.values[0],
                method: "PATCH",
                data: data
            };

        } else if (state.isDeleted()) {
            request = {
                requestUri:  baseUrl+'/'+ key.values[0],
                method: "DELETE",
                data: null
            };

        } else {
            throw new Error("Cannot save an entity whose EntityState is " + state.name);
        }

        return request;
    }

    function executeQuery(mappingContext) {
        var adapter = mappingContext.adapter = this;
        mappingContext.entityType = adapter._getEntityTypeFromMappingContext(mappingContext);
        var deferred = breeze.Q.defer();
        var url = mappingContext.getUrl();
        var headers = {};

        adapter._ajaxImpl.ajax({
            type: "GET",
            url: url,
            headers: headers,
            params: mappingContext.query.parameters,
            success: querySuccess,
            error: function (response) {
                deferred.reject(adapter._createErrorFromResponse(response, url, mappingContext));
            }
        });
        return deferred.promise;

        function querySuccess(response) {
            try {
                var rData = {
                    results: adapter._getResponseData(response),
                    httpResponse: response
                };
                deferred.resolve(rData);
            } catch (e) {
                // if here, the adapter is broken, not bad data
                var err = new Error("Query failed while parsing successful query response")
                err.name = "Program Error";
                err.response = response;
                err.originalError = e;
                deferred.reject(err);
            }
        }
    }

}));